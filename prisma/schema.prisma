generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  addresses     Address[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Address {
  id              String    @id @default(cuid())
  userId          String
  type            String    // "shipping" or "billing"
  streetAddress   String
  apartment       String?
  city            String
  state           String
  postalCode      String
  country         String
  isDefault       Boolean   @default(false)
  phone           String?
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders  Order[]   @relation("ShippingAddress")
  billingOrders   Order[]   @relation("BillingAddress")

  @@map("addresses")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  slug        String    @unique
  parentId    Int?      @map("parent_id")
  imageUrl    String?   @map("image_url")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  parent      Category? @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    Product[]

  @@map("categories")
}

model Product {
  id            Int         @id @default(autoincrement())
  name          String
  brand         String
  price         Decimal     @db.Decimal(10, 2)
  description   String?
  imageUrl      String?     @map("image_url")
  rating        Decimal?    @db.Decimal(3, 2)
  stockQuantity Int         @map("stock_quantity")
  categoryId    Int?        @map("category_id")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  category      Category?   @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]

  @@map("products")
}

model Order {
  id                String      @id @default(cuid())
  userId            String
  status            OrderStatus @default(PENDING)
  totalAmount       Decimal     @map("total_amount") @db.Decimal(10, 2)
  subtotal          Decimal     @db.Decimal(10, 2)
  shippingCost      Decimal     @db.Decimal(10, 2)
  shippingAddressId String
  billingAddressId  String
  shippingMethod    ShippingMethod @default(STANDARD)
  shippingAddress   Address     @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddress    Address     @relation("BillingAddress", fields: [billingAddressId], references: [id])
  trackingNumber    String?     @map("tracking_number")
  paymentStatus     PaymentStatus @default(PENDING)
  paymentProvider   PaymentProvider @default(PAYSTACK)
  paymentReference  String?     @unique // PayStack reference
  paymentMethod     PaymentMethod?
  paymentData      Json?       @map("payment_data") // Store PayStack response data
  currency         String      @default("GHS")
  createdAt        DateTime    @default(now()) @map("created_at")
  updatedAt        DateTime    @updatedAt @map("updated_at")
  orderItems       OrderItem[]
  user             User        @relation(fields: [userId], references: [id])

  @@map("orders")
}

model OrderItem {
  id          String    @id @default(cuid())
  orderId     String    @map("order_id")
  productId   Int       @map("product_id")
  quantity    Int
  priceAtTime Decimal   @map("price_at_time") @db.Decimal(10, 2)
  createdAt   DateTime  @default(now()) @map("created_at")
  order       Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product   @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
}

enum PaymentProvider {
  PAYSTACK
}

enum PaymentMethod {
  CARD
  BANK_TRANSFER
  MOBILE_MONEY
}

enum ShippingMethod {
  STANDARD
  EXPRESS
}